// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cars Car[]
  tickets Ticket[]
}

model Car {
  id Int @id @default(autoincrement())
  userId Int
  plate String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
  tickets Ticket[]
}

model City {
  id Int @id @default(autoincrement())
  code String @unique
  name String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  areas Area[]
}

model Area {
  id Int @id @default(autoincrement())
  name String
  cityId Int

  city City @relation(fields: [cityId], references: [id])
  tickets Ticket[]
}

model Rule {
  id Int @id @default(autoincrement())
  name String
  entityId Int
  entityType RuleEntityType
  rule Json
}

model Ticket {
  id Int @id @default(autoincrement())
  totalPrice Float?
  status TicketStatus @default(IN_PROGRESS)
  startedAt DateTime @default(now())
  finishedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId Int
  carId Int
  areaId Int

  user User @relation(fields: [userId], references: [id])
  car Car @relation(fields: [carId], references: [id])
  area Area @relation(fields: [areaId], references: [id])
}

enum RuleEntityType {
  CITY
  AREA
}

enum TicketStatus {
  IN_PROGRESS
  FINISHED
}
